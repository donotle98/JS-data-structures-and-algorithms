Big O notation is used in Computer Science to describe the performance or complexity of an algorithm.

Big O(theta) specifically describes the worst-case scenario, and can be used to describe the execution time required or the space used.
Big Ω(omega) specifically describes the best-case scenario.



The different common runtimes from fastest to slowest are: Θ(1), Θ(log N), Θ(N), Θ(N log N), Θ(N^2), Θ(2^N), Θ(N!).


Examples:

 - O(1) describes an algorithm that will always execute in the same time (or space) regardless of the size of the input data set.

bool IsFirstElementNull(IList<string> elements)
{
    return elements[0] == null;
}



 - O(N) describes an algorithm whose performance will grow linearly and in direct proportion to the size of the input data set.

 bool ContainsValue(IList<string> elements, string value)
{
    foreach (var element in elements)
    {
        if (element == value) return true;
    }

    return false;
}



 - O(N^2) represents an algorithm whose performance is directly proportional to the square of the size of the input data set
        Deeper nested iterations will result in O(N3), O(N4) etc.

bool ContainsDuplicates(IList<string> elements)
{
    for (var outer = 0; outer < elements.Count; outer++)
    {
        for (var inner = 0; inner < elements.Count; inner++)
        {
            // Don't compare with self
            if (outer == inner) continue;

            if (elements[outer] == elements[inner]) return true;
        }
    }

    return false;
}



 - O(2^N) denotes an algorithm whose growth doubles with each addition to the input data set.
            The growth curve of an O(2N) function is exponential - starting off very shallow, then rising meteorically.

int Fibonacci(int number)
{
    if (number <= 1) return number;

    return Fibonacci(number - 2) + Fibonacci(number - 1);
}



 - O(n!) This is factorial runtime. You will often see this runtime when you have to generate all of the different permutations of something

void nFacRuntimeFunc(int n) 
{
  for (int i = 0; i < n; i++) {

    nFacRuntimeFunc( n - 1 );

  }
}



 - O(log N) Logarithms is the theoretical limit for searching a data set
    - Binary search is a technique used to search sorted data sets. It works by selecting the middle element of the data set, essentially the median, and compares it against a target value
        - This type of algorithm is described as O(log N)
        - an input data set containing 10 items takes one second to complete, a data set containing 100 items takes two seconds, and a data set containing 1000 items will take three seconds
        - Doubling the size of the input data set has little effect on its growth as after a single iteration of the algorithm the data set will be halved and therefore on a par with an input data set half the size


